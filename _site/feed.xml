<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.2.0">Jekyll</generator><link href="/feed.xml" rel="self" type="application/atom+xml" /><link href="/" rel="alternate" type="text/html" /><updated>2022-05-13T14:12:22-05:00</updated><id>/feed.xml</id><title type="html">Your awesome title</title><subtitle>Write an awesome description for your new site here. You can edit this line in _config.yml. It will appear in your document head meta (for Google search results) and in your feed.xml site description.</subtitle><entry><title type="html">I Believe in Programming Principles 🧠</title><link href="/dev/programming-principles-language-skills" rel="alternate" type="text/html" title="I Believe in Programming Principles 🧠" /><published>2021-06-13T00:00:00-05:00</published><updated>2021-06-13T00:00:00-05:00</updated><id>/dev/programming-principles-language-skills</id><content type="html" xml:base="/dev/programming-principles-language-skills">&lt;p&gt;I’ll keep this one short. I believe that there is a distinct value in &lt;em&gt;thinking&lt;/em&gt; like a programmer that transcends the knowledge of a particular language.&lt;/p&gt;

&lt;p&gt;Actually—I don’t just believe that there is. I &lt;em&gt;know&lt;/em&gt; that there is.&lt;/p&gt;

&lt;p&gt;Right now I’m diving deep into the React framework. Building apps which fired off numerous components based off of an array of data &lt;em&gt;changed the way I think&lt;/em&gt; about building pages in general. “Hard coding is for fools! Automate that mess!”&lt;/p&gt;

&lt;p&gt;As a result I refactored an aspect of my portfolio page with the same principle in mind. I figured out a way—in Liquid, a totally different framework—to do essentially the same thing I was doing in React. Same programming principle. Different language.&lt;/p&gt;

&lt;p&gt;My lightbulb 💡 moment was hardly the Copernican revolution. But the whole process did cement in my mind the idea that programming know-how is &lt;em&gt;independent&lt;/em&gt; (at least to a degree) of specific languages.&lt;/p&gt;</content><author><name></name></author><category term="dev" /><summary type="html">I’ll keep this one short. I believe that there is a distinct value in thinking like a programmer that transcends the knowledge of a particular language.</summary></entry><entry><title type="html">Are Programmers Lazy? 🧐</title><link href="/dev/are-programmers-lazy" rel="alternate" type="text/html" title="Are Programmers Lazy? 🧐" /><published>2021-05-23T00:00:00-05:00</published><updated>2021-05-23T00:00:00-05:00</updated><id>/dev/are-programmers-lazy</id><content type="html" xml:base="/dev/are-programmers-lazy">&lt;p&gt;Programmers often say they’re lazy. They say this meaning that they would rather invent (or discover) a solution that cuts out grunt work than do the same tasks over and over.&lt;/p&gt;

&lt;p&gt;I think there’s a clearer way to frame it. Good programmers are lazy with respect to &lt;em&gt;grunt&lt;/em&gt; work, but marked by diligence when it comes to the &lt;em&gt;mental&lt;/em&gt; work of refactoring and eliminating redundancy.&lt;/p&gt;

&lt;p&gt;That said, there &lt;em&gt;is&lt;/em&gt; some wisdom in championing the traditional “programmers are lazy” trope. It incentivizes &lt;em&gt;mental&lt;/em&gt; work by highlighting that mental work can save you from &lt;em&gt;grunt&lt;/em&gt; work.&lt;/p&gt;

&lt;p&gt;So, after all that, I guess I’m refactoring my site’s project section because I’m lazy.&lt;/p&gt;

&lt;p&gt;After updating this section with a few projects, I’ve been struck with how fragile the process of hard-coding each new project in HTML. What if I forget to update one of the links? What if I ruin the section by mixing up the container hierarchy?&lt;/p&gt;

&lt;p&gt;I’ve been trying to think of a solution to simply feed data to… something… and have it render each project. I would already know how to do this if my site were using React. I &lt;em&gt;could&lt;/em&gt; build this with vanilla JavaScript by iterating over an array of project data and appending each project card to the project section.&lt;/p&gt;

&lt;p&gt;Or I could be even lazier and look for a pre-built solution in Jekyll. There’s gotta be something, right?&lt;/p&gt;

&lt;div style=&quot;text-align: center; margin-bottom: 1.5rem;&quot;&gt;&lt;img src=&quot;https://media.giphy.com/media/3ohzAaRJ1e5SvhIWWY/giphy.gif&quot; /&gt;&lt;/div&gt;

&lt;p&gt;Yup! &lt;a href=&quot;https://jekyllrb.com/docs/datafiles/&quot;&gt;This&lt;/a&gt; article in the Jekyll documentation shows how to iterate over YAML, JSON, or CSV data files via Liquid. Now I can “avoid copy-pasting large chunks of code in [my] Jekyll [template].” (You read my mind, Jekyll Docs.) After scanning some Liquid documentation I figured out how to sort it, too.&lt;/p&gt;

&lt;p&gt;Cheers to (not?) being lazy.🥂&lt;/p&gt;</content><author><name></name></author><category term="dev" /><summary type="html">Programmers often say they’re lazy. They say this meaning that they would rather invent (or discover) a solution that cuts out grunt work than do the same tasks over and over.</summary></entry></feed>