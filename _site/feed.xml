<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.2.0">Jekyll</generator><link href="/feed.xml" rel="self" type="application/atom+xml" /><link href="/" rel="alternate" type="text/html" /><updated>2022-11-06T11:11:37-06:00</updated><id>/feed.xml</id><title type="html">Your awesome title</title><subtitle>Write an awesome description for your new site here. You can edit this line in _config.yml. It will appear in your document head meta (for Google search results) and in your feed.xml site description.</subtitle><entry><title type="html">Breaking Into Tech: Resources and Thoughts</title><link href="/dev/breaking-into-tech" rel="alternate" type="text/html" title="Breaking Into Tech: Resources and Thoughts" /><published>2022-10-29T00:00:00-05:00</published><updated>2022-10-29T00:00:00-05:00</updated><id>/dev/breaking-into-tech</id><content type="html" xml:base="/dev/breaking-into-tech">&lt;p&gt;&lt;em&gt;An in-progress and informal amalgamation of resources and thoughts on how to break into tech.&lt;/em&gt;&lt;/p&gt;

&lt;h2 id=&quot;Ô∏è-dont-let-this-guide-stress-you-out-Ô∏è&quot;&gt;üíÜ‚Äç‚ôÇÔ∏è Don‚Äôt Let This Guide Stress You Out üíÜ‚Äç‚ôÄÔ∏è&lt;/h2&gt;

&lt;p&gt;Learning to code‚Äîespecially when you are don‚Äôt have experience with code and are trying to learn it in a short period of time‚Äîis an immense effort.&lt;/p&gt;

&lt;p&gt;Throw in networking, blogging, contributing to open source, building projects, and meetups (all common advice for folks getting into tech and things I mention below) and it can start to feel really overwhelming.&lt;/p&gt;

&lt;p&gt;Don‚Äôt panic!&lt;/p&gt;

&lt;p&gt;No one does &lt;em&gt;all&lt;/em&gt; these things. I didn‚Äôt even do most of them, and I got hired. My point is writing this is not to burden aspiring engineers with a huge list of todos, but to put together helpful tips to glean from with the goal of &lt;em&gt;slowly&lt;/em&gt; and &lt;em&gt;sustainably&lt;/em&gt; rolling small steps into your current workflow.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;This is the list I wish I had when I started my coding journey.&lt;/strong&gt;&lt;/p&gt;

&lt;h2 id=&quot;linkedin-posts-and-follows&quot;&gt;LinkedIn Posts and Follows&lt;/h2&gt;

&lt;p&gt;Following content creators who explain tech and the tech industry can be helpful. But be careful with social media! It can be a big time-waster and can trigger imposter syndrome. &lt;em&gt;You belong in tech&lt;/em&gt; even if it feels like everyone else‚Äôs latest project or internship or (fill in the blank) is ‚ú®amazing‚ú® and your stuff is just normal.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;&lt;a href=&quot;https://www.linkedin.com/posts/rlmorrison74_breakintotech-mentalhealth-breakintotech-activity-6955906356264534016-VSdZ/?utm_source=linkedin_share&amp;amp;utm_medium=member_desktop_web&quot;&gt;‚≠êÔ∏è Ray Morrison post&lt;/a&gt; - realistic take on post boot camp job search duration with stats&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.linkedin.com/in/taylordesseyn/&quot;&gt;Taylor Desseyn&lt;/a&gt; -  tech industry content&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.linkedin.com/in/tclain/&quot;&gt;Tim Clain&lt;/a&gt; - breaking into tech content&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.linkedin.com/feed/update/urn:li:activity:6956349618632724480/?updateEntityUrn=urn%3Ali%3Afs_updateV2%3A%28urn%3Ali%3Aactivity%3A6956349618632724480%2CFEED_DETAIL%2CEMPTY%2CDEFAULT%2Cfalse%29&quot;&gt;Tim Clain post&lt;/a&gt; - learning to code is tough; take care of yourself&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.linkedin.com/posts/tclain_emotional-intelligence-technical-abilities-activity-6942275203204878336-impp/?utm_source=linkedin_share&amp;amp;utm_medium=member_desktop_web&quot;&gt;Tim Clain post&lt;/a&gt; - emotional IQ is important in tech&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.linkedin.com/posts/ebandersen_programming-softwareengineering-jobsearch-activity-6960599288162742273-chgg/?utm_source=linkedin_share&amp;amp;utm_medium=ios_app&quot;&gt;Erik Andersen post&lt;/a&gt; - why companies require experience for entry level positions (disclaimer: the strategies he mentions for differentiating yourself are kind of inaccessible/unrealistic)&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;gaining-real-world-experience-prior-to-your-first-real-world-job-&quot;&gt;Gaining Real World Experience Prior to Your First Real World Job ü§î&lt;/h2&gt;

&lt;blockquote&gt;
  &lt;p&gt;* entry level position *&lt;br /&gt;&lt;br /&gt;
* 1-2 years experience required *&lt;br /&gt;&lt;br /&gt;
ü§¨&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Because it‚Äôs so common for entry level positions to require experience, it‚Äôs a good idea to plan how you will gain &lt;em&gt;some&lt;/em&gt; form of experience you can put on your r√©sum√© and talk about in interviews. Here are some ideas in order of increasing complexity/difficulty/effort-intensiveness. (The higher options may be more impressive to prospective employers).&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Personal projects&lt;/li&gt;
  &lt;li&gt;Real-world projects
    &lt;ol&gt;
      &lt;li&gt;e.g. doing a website for a local business or organization &lt;em&gt;pro bono&lt;/em&gt;&lt;/li&gt;
      &lt;li&gt;e.g. submitting a PR/ contributing to an open source project (Tip: contributions to documentation are legitimate contributions, but possibly more suitable to early-career devs. I‚Äôve contributed to the Mozilla Development Network in this fashion and have been able to discuss what I did in an interview.)&lt;/li&gt;
      &lt;li&gt;e.g. hosting a personal project on an app store or public facing URL to make   it more ‚Äúreal-world‚Äù&lt;/li&gt;
    &lt;/ol&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;em&gt;Paid&lt;/em&gt; real-world projects
    &lt;ol&gt;
      &lt;li&gt;e.g. actually getting paid to create websites for businesses or freelancing on a site like Fiverr or Upwork&lt;/li&gt;
    &lt;/ol&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;See also:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.swyx.io/learn-in-public/&quot;&gt;Shawn Wang‚Äôs post on learning in public&lt;/a&gt; - has some interesting ideas on learning in public as a growth/networking strategy&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.codecademy.com/resources/blog/how-to-get-tech-job-not-enough-experience/?utm_campaign=camp~august_2022_newsletter~prod~All~geo~All~aud~General~funn_Awareness~msg~Learn_More~cont~CTA_Button~sited~Blog_Post~time~2022Q3~&amp;amp;utm_content=blog&amp;amp;utm_source=iterable&amp;amp;utm_medium=email&quot;&gt;How to Get a Job in Tech if You Don‚Äôt Have ‚ÄúEnough‚Äù Experience&lt;/a&gt; - excellent article on how to navigate interviews/job applications when you have limited experience&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;dont-sleep-on-networking&quot;&gt;Don‚Äôt Sleep on Networking&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;Don‚Äôt sleep on networking.&lt;/strong&gt; It‚Äôs unrealistic to think that you will receive interviews and job offers in a reasonable time frame without it.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;And don‚Äôt wait to network.&lt;/em&gt; Weaving small networking steps into your workflow early on in your coding journey is a good idea.&lt;/p&gt;

&lt;p&gt;Here are some general principles to consider with networking:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Cultivate your online presence
    &lt;ul&gt;
      &lt;li&gt;A personal site/online portfolio - &lt;a href=&quot;https://www.joshwcomeau.com/effective-portfolio/&quot;&gt;Josh Comeau has an excellent guide on creating an online portfolio&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;a GitHub profile&lt;/li&gt;
      &lt;li&gt;a LinkedIn profile&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Reach out to folks &lt;em&gt;locally&lt;/em&gt; and &lt;em&gt;online&lt;/em&gt;
    &lt;ul&gt;
      &lt;li&gt;Connect with people in your network, prospective employers, and recruiters via Twitter, LinkedIn, or email&lt;/li&gt;
      &lt;li&gt;Attend local meetups‚Äîaim at presenting!&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;how-i-got-my-current-position&quot;&gt;How I got my current position:&lt;/h3&gt;

&lt;ol&gt;
  &lt;li&gt;I reached out to a friend in my network.&lt;/li&gt;
  &lt;li&gt;He let me know about a position for which he knew the recruiter.&lt;/li&gt;
  &lt;li&gt;I got in touch with the recruiter via email after applying to a position and she connected me with the CXO of the company.&lt;/li&gt;
  &lt;li&gt;The interview process revealed that I was a really good match for this position, and the rest is history!&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;be-a-tinkerer&quot;&gt;Be a Tinkerer&lt;/h2&gt;

&lt;p&gt;Fool around with stuff. Be curious.&lt;/p&gt;

&lt;p&gt;Everything you do with computing contributes to your overall knowledge as a developer, even if it‚Äôs stupid as hell or doesn‚Äôt culminate in a finished project. Environment variables clicked for me when I was trying to get &lt;a href=&quot;https://github.com/sharkdp/bat&quot;&gt;bat&lt;/a&gt; to pull in my terminal‚Äôs &lt;a href=&quot;https://draculatheme.com/&quot;&gt;Dracula&lt;/a&gt; theme so I could feel like a vampire üßõüèæ‚Äç‚ôÇÔ∏è. &lt;strong&gt;How stupid is that!?&lt;/strong&gt; But learning about environment variables helped me contribute to the Mozilla Development Network‚Äôs documentation‚Ä¶ ü§Ø&lt;/p&gt;

&lt;p&gt;Likewise, my half-finished and fully-abandoned projects have still contributed to my career. I didn‚Äôt get a shiny new website out of my tinkering, but I got exposure to new tools, experience, and skills that are benefiting me now. Try to finish your projects, but don‚Äôt sweat it if you don‚Äôt. You probably learned something.&lt;/p&gt;

&lt;h2 id=&quot;steer-clear-of-bad-advice-&quot;&gt;Steer Clear of Bad Advice üö®&lt;/h2&gt;

&lt;p&gt;When I was first looking at getting a job in tech, I was too uncritical about advice I saw on the internet.&lt;/p&gt;

&lt;p&gt;For example &lt;a href=&quot;https://www.youtube.com/watch?v=vB4bSDznwgM&quot;&gt;this&lt;/a&gt; video implies that three months would be on the long end for someone going from no coding experience to hired in tech. That‚Äôs a pretty ridiculous take (see Ray Morrison‚Äôs post linked above), but unfortunately I received it uncritically and it resulted in unrealistic expectations.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://www.youtube.com/c/CodingPhase&quot;&gt;Another video&lt;/a&gt;  suggested it was a good idea to try to find non-engineer positions where you could get your feet wet with code as a way to get practical experience and learn on the job. I would categorize this advice as unhelpful. There aren‚Äôt too many jobs that fit this description, and the result was that I wasted a lot of time searching for these jobs when I should have just been working on code.&lt;/p&gt;

&lt;p&gt;No shade against the YouTubers who put out these particular videos; a lot of their content is great. I would simply advise folks to be critical of the information they take in about the field.&lt;/p&gt;

&lt;h2 id=&quot;miscellaneous&quot;&gt;Miscellaneous&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;‚≠êÔ∏è &lt;strong&gt;A resource I want to dig into that seems promising for outlining how to get into tech is Shawn Wang‚Äôs&lt;/strong&gt; &lt;a href=&quot;https://learninpublic.org/&quot;&gt;&lt;em&gt;Coding Career Handbook&lt;/em&gt;&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;I‚Äôve followed and appreciated Anna J. McDougall and am curious to read her book &lt;a href=&quot;https://annamcdougall.com&quot;&gt;&lt;em&gt;You Belong in Tech&lt;/em&gt;&lt;/a&gt;.&lt;/li&gt;
  &lt;li&gt;I created a custom two-column r√©sum√© layout, but I think it‚Äôs likely that due to the formatting it did not pass &lt;a href=&quot;https://resumegenius.com/faq/should-i-use-a-template-for-my-resume#:~:text=Additionally%2C%20using%20a%20resume%20template,employer%20uses%20to%20assess%20candidates&quot;&gt;digital application tracking systems&lt;/a&gt;. &lt;em&gt;Use a tried and true template.&lt;/em&gt; Google around and I‚Äôm sure you can find free, vetted templates.&lt;/li&gt;
  &lt;li&gt;I don‚Äôt have a ton of thoughts on technical interviews that center on a coding test (missed a cool opportunity once by bombing a tech interview I was underprepared for, got hired at two other places without one ü§∑üèæ‚Äç‚ôÇÔ∏è), but sprinkling in prep for those is a good idea too. &lt;a href=&quot;https://www.hackerrank.com/&quot;&gt;Hackerrank&lt;/a&gt; is one resource.&lt;/li&gt;
&lt;/ul&gt;</content><author><name></name></author><category term="dev" /><summary type="html">An in-progress and informal amalgamation of resources and thoughts on how to break into tech.</summary></entry><entry><title type="html">How to Create a Powerful, Streamlined Build Process in LabVIEW</title><link href="/dev/powerful-build-process-labview" rel="alternate" type="text/html" title="How to Create a Powerful, Streamlined Build Process in LabVIEW" /><published>2022-08-15T00:00:00-05:00</published><updated>2022-08-15T00:00:00-05:00</updated><id>/dev/powerful-build-process-labview</id><content type="html" xml:base="/dev/powerful-build-process-labview">&lt;p&gt;It can be easy to forget to manage version numbers in NI LabVIEW.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;The version number is often the only thing you need to regularly change in the (fourteen-section!) application properties dialogue. It is cumbersome to access and easy to ignore.&lt;/li&gt;
  &lt;li&gt;LabVIEW gives you the option to bypass the application properties dialogue and create a build with the pre-existing specifications.&lt;/li&gt;
  &lt;li&gt;The application properties dialogue provides an option to automatically iterate just the &lt;em&gt;build&lt;/em&gt; number, further reducing the frequency with which one would enter the dialogue.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;strong&gt;It‚Äôs easy, given these facts, to slip into a situation where you are neglecting to manage your build version numbers properly.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Lets say you create ten consecutive builds, all of which only need to have the final digit of the version number‚Äîthe &lt;em&gt;build&lt;/em&gt; version number‚Äîincremented, and you configure LabVIEW to increment these version numbers automatically. In this case, you would likey bypass the application properties dialogue. An eleventh build needs to have one of the other version numbers iterated, and therefore needs to be changed in the application properties dialogue. What are the odds that, having created these ten builds one way, you remember the other way to create the build? Or even that you &lt;em&gt;need&lt;/em&gt; to use another way to create it? The 10x developer on your team will always remember; many of the rest of us won‚Äôt.&lt;/p&gt;

&lt;p&gt;But there is good news. &lt;strong&gt;You can create a powerful, streamlined build process in LabVIEW that will encourage consistent management of build version numbers.&lt;/strong&gt;&lt;/p&gt;

&lt;h2 id=&quot;implementation&quot;&gt;Implementation&lt;/h2&gt;

&lt;p&gt;LabVIEW has the ability to &lt;em&gt;create pre- and post-build actions&lt;/em&gt; and a number of &lt;a href=&quot;https://www.ni.com/docs/en-US/bundle/labview-2020/page/glang/application_builder_vis.html&quot;&gt;&lt;em&gt;application builder VIs&lt;/em&gt;&lt;/a&gt; that you can use, including &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Build&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Clean&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Deploy&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Get Build Specification Version&lt;/code&gt;, and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Set Build Specification Version&lt;/code&gt; VIs.&lt;/p&gt;

&lt;p&gt;When I first thought through this problem, I imagined a simple solution: add some functionality to the build method‚Äôs pre-build action that allowed users to set the version with &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Get Build Specification Version&lt;/code&gt; VI. However this approach did not work. The problem is that when you launch a build you are using a pre-set build specification. Altering the version number in the build specification as part of a pre-build action will change the build specification for the &lt;em&gt;next&lt;/em&gt; build, but it will not affect the build being created at that time.&lt;/p&gt;

&lt;p&gt;A better solution is to &lt;em&gt;create your own build VI&lt;/em&gt; (not to be confused with LabVIEW‚Äôs built-in &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Build&lt;/code&gt; VI) that first allows developers to set the version number with the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Set Build Specification&lt;/code&gt; VI and then, second, runs the built-in &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Build&lt;/code&gt; VI. The result will be that the build is initiated &lt;em&gt;after&lt;/em&gt; the build version is actually changed. The final result will follow the general form of the VI below:&lt;/p&gt;

&lt;div style=&quot;text-align: center; margin-bottom: 1.5rem;&quot;&gt;&lt;img style=&quot;max-width: 100%&quot; src=&quot;https://i.imgur.com/nN9tc9I.jpg&quot; /&gt;&lt;/div&gt;

&lt;p&gt;I‚Äôve implemented this strategy successfully, and the result is more consistent builds across the whole team regardless of how we need to manipulate version numbers when creating the new build. LabVIEW‚Äôs default functionality makes it easy to get into bad development habits, but it also contains tools that, if implemented properly, can create a powerful and streamlined build process.&lt;/p&gt;

&lt;p&gt;And the strategy I‚Äôve outlined is just one piece of the puzzle. When and how you trigger your build VI and what you do after building (whether through the post-build VI or another way) are other areas where you can optimize your LabVIEW build process.&lt;/p&gt;

&lt;h2 id=&quot;further-reading&quot;&gt;Further Reading&lt;/h2&gt;

&lt;p&gt;Justin Goeres‚Äôs &lt;a href=&quot;https://www.jki.net/blog/jki/can-you-build-your-application-in-one-click&quot;&gt;article&lt;/a&gt; about configuring a one-click build method in LabVIEW is worth a read if you are interested on this topic.&lt;/p&gt;</content><author><name></name></author><category term="dev" /><summary type="html">It can be easy to forget to manage version numbers in NI LabVIEW.</summary></entry><entry><title type="html">Taking Your Mac Terminal from Zero to Awesome</title><link href="/dev/mac-terminal-zero-to-awesome" rel="alternate" type="text/html" title="Taking Your Mac Terminal from Zero to Awesome" /><published>2022-07-28T00:00:00-05:00</published><updated>2022-07-28T00:00:00-05:00</updated><id>/dev/mac-terminal-zero-to-awesome</id><content type="html" xml:base="/dev/mac-terminal-zero-to-awesome">&lt;p&gt;I‚Äôve had mixed feelings about the terminal. On one hand, I‚Äôm a big fan of controlling a computer using primarily the keyboard. I use apps like Magnet, Things 3, and Alfred with keyboard shortcuts to perform as many actions as I can without taking my hands off the keyboard. On the other hand, the terminal seemed to be intimidating and have a steep learning curve.&lt;/p&gt;

&lt;p&gt;Encountering &lt;a href=&quot;https://www.craftz.dog/&quot;&gt;Takuya Matsuyama&lt;/a&gt; changed that. He‚Äôs written and made videos about how he sets up his terminal for development. I realized that how he uses his terminal is &lt;em&gt;easier&lt;/em&gt; than what I had been doing. Yes, when you take your first steps with &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;cd&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ls&lt;/code&gt;, you‚Äôre interacting with the terminal at its &lt;em&gt;most difficult&lt;/em&gt; not it‚Äôs &lt;em&gt;easiest&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;Starting out with the raw terminal is like parallel parking a stick shift for your first driving lesson. I want to make your terminal experience more like circling a cul-de-sac in an automatic transmission vehicle.&lt;/p&gt;

&lt;p&gt;What follows is a quick and easy guide to make your terminal experience more seamless and enjoyable (i.e. awesome!) using &lt;strong&gt;Hyper&lt;/strong&gt; on a &lt;strong&gt;Mac&lt;/strong&gt; with &lt;strong&gt;zsh&lt;/strong&gt; (which has been the default shell on Mac since Catalina).&lt;/p&gt;

&lt;p&gt;We are going to install‚Ä¶&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;The &lt;a href=&quot;https://github.com/romkatv/powerlevel10k&quot;&gt;Powerlevel10k&lt;/a&gt; theme (with nerd fonts) to provide more useful information on the command line&lt;/li&gt;
  &lt;li&gt;Two utilities that beef up basic command line functions:
    &lt;ul&gt;
      &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;z&lt;/code&gt; for directory jumping&lt;/li&gt;
      &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;exa&lt;/code&gt; for better file listing&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;prerequisites&quot;&gt;Prerequisites&lt;/h2&gt;
&lt;ol&gt;
  &lt;li&gt;&lt;a href=&quot;https://brew.sh/&quot;&gt;Homebrew&lt;/a&gt;, a free macOS package manager, installed. &lt;em&gt;We‚Äôll use this to efficiently download software.&lt;/em&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://git-scm.com/&quot;&gt;Git&lt;/a&gt; command line interface installed. &lt;em&gt;We‚Äôll use this to clone git repositories.&lt;/em&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;step-1-downloading-hyper&quot;&gt;Step 1: Downloading Hyper&lt;/h2&gt;
&lt;p&gt;Hyper stood out to me for a few reasons. I read Josh Comeau‚Äôs recent &lt;a href=&quot;https://www.joshwcomeau.com/javascript/terminal-for-js-devs/&quot;&gt;article&lt;/a&gt; about it and saw it‚Äôs pane splitting capabilities and that it was built with the web technologies I was most familiar. After briefly testing it out, I was sold. My favorite feature is the pane splitting, which is intuitive to use. I also like that I can view developer tools (yes, just like you would on a webpage in Chrome ü§Ø) and inject CSS to tweak the user interface.&lt;/p&gt;

&lt;p&gt;You can download the Hyper app from the Hyper &lt;a href=&quot;https://hyper.is/&quot;&gt;website&lt;/a&gt;.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Note: I would also recommend &lt;a href=&quot;https://iterm2.com/&quot;&gt;iTerm2&lt;/a&gt; as a great terminal option!&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;step-2-download-and-install-the-powerlevel-10k-theme&quot;&gt;Step 2: Download and Install the Powerlevel 10k Theme&lt;/h2&gt;
&lt;p&gt;The default view from the terminal tells you which user you are using and not much else. This is not very useful, but applying a &lt;em&gt;theme&lt;/em&gt; to z shell can change this so that the prompt line gives you information about the path to your current directory and its git status.&lt;/p&gt;

&lt;p&gt;Before doing this, you should install a &lt;a href=&quot;https://www.nerdfonts.com/&quot;&gt;nerd font&lt;/a&gt;. Nerd fonts are fonts patched with special glyphs to enhance the terminal experience. For example, a nerd font will have a UNIX penguin glyph that occupies just a single character width and a git branch glyph among many others.&lt;/p&gt;

&lt;p&gt;To install a nerd font:&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;Run this homebrew prompt: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;brew tap homebrew/cask-fonts&lt;/code&gt;.&lt;/li&gt;
  &lt;li&gt;Browse &lt;a href=&quot;https://www.nerdfonts.com/font-downloads&quot;&gt;this&lt;/a&gt; page to decide which font you want to use. (I have been using Fira Code.)&lt;/li&gt;
  &lt;li&gt;Run a homebrew prompt to install a specific font: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;brew install --cask font-[FONTNAME]-nerd-font&lt;/code&gt;. (If you encounter issues, all the fonts are listed &lt;a href=&quot;https://github.com/Homebrew/homebrew-cask-fonts/tree/master/Casks&quot;&gt;here&lt;/a&gt;)&lt;/li&gt;
  &lt;li&gt;Edit the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;fontFamily&lt;/code&gt; field of the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.hyper.js&lt;/code&gt; file to include the name of your nerd font first.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Install Powerlevel10k and reference it in your runtime configuration file using the following prompts:&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;brew install romkatv/powerlevel10k/powerlevel10k&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;echo &quot;source $(brew --prefix)/opt/powerlevel10k/powerlevel10k.zsh-theme&quot; &amp;gt;&amp;gt;~/.zshrc&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;To get set up, all you need to do is run &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;exec zsh&lt;/code&gt; to restart Zsh, and type in &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;p10k configure&lt;/code&gt; to set up the theme (if configuration does not start automatically). Note that you can edit the theme at any time by running the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;p10k configure&lt;/code&gt; command.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Tip: I like choosing the rainbow, lean, or pure themes because they default to pulling from your terminal‚Äôs color scheme. This allows flexible tweaking of your shell theme through your terminal theme‚Äîwhich is a cinch with Hyper.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;step-3-download-and-install-utilities&quot;&gt;Step 3: Download and Install Utilities&lt;/h2&gt;
&lt;h3 id=&quot;download-and-install-z&quot;&gt;Download and Install &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;z&lt;/code&gt;&lt;/h3&gt;
&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;z&lt;/code&gt; is an incredibly useful shell utility. Typically when navigating around the shell you will use the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;cd&lt;/code&gt; command to move very carefully from directory to directory. For those of us who don‚Äôt have our system‚Äôs file structure memorized this normally means &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;cd&lt;/code&gt;-ing up and down a single directory at a time.&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;z&lt;/code&gt; helps this go &lt;em&gt;a lot&lt;/em&gt; more smoothly. It takes a regex parameter and automatically sends you to the directory you most likely mean based on frequency and recency. For example, instead of typing &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;cd ~/Repositories/ndm-notes/&lt;/code&gt; to access my personal note repository, I just hit &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;z nd&lt;/code&gt;, press enter, and I‚Äôm there.&lt;/p&gt;

&lt;p&gt;To install it, we need to‚Ä¶&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;Download &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;z.sh&lt;/code&gt; from &lt;a href=&quot;https://github.com/rupa/z/&quot;&gt;this&lt;/a&gt; repository.&lt;/li&gt;
  &lt;li&gt;Tell our &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.zshrc&lt;/code&gt; file (the &lt;strong&gt;z&lt;/strong&gt; &lt;strong&gt;sh&lt;/strong&gt;ell &lt;strong&gt;r&lt;/strong&gt;untime &lt;strong&gt;c&lt;/strong&gt;onfiguration file located at ours system‚Äôs home directory) where we‚Äôve put &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;z.sh&lt;/code&gt;.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;You can download &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;z.sh&lt;/code&gt; with a single command line prompt. The following script will create a directory in your home folder called &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.z-jump&lt;/code&gt; (you can make this whatever you like by tweaking the relevant commands) and download &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;z.sh&lt;/code&gt; to that directory:&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;mkdir ~/.z-jump &amp;amp;&amp;amp; curl https://raw.githubusercontent.com/rupa/z/master/z.sh &amp;gt; ~/.z-jump/z.sh&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;We need to include a line with a path to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;z.sh&lt;/code&gt; in our &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.zshrc&lt;/code&gt; file. The following command will do that:&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;echo &quot;. ~/.z-jump/z.sh&quot; &amp;gt;&amp;gt; ~/.zshrc&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Now that the script is installed, all you need to do is reload your runtime configuration file (by running &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;exec zsh&lt;/code&gt;), and load up the database by &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;cd&lt;/code&gt;-ing around your computer. Following these steps should enable the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;z&lt;/code&gt; command and simplify your terminal workflow.&lt;/p&gt;

&lt;h3 id=&quot;download-and-install-exa&quot;&gt;Download and Install &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;exa&lt;/code&gt;&lt;/h3&gt;
&lt;p&gt;The command line &lt;a href=&quot;https://the.exa.website/&quot;&gt;tool&lt;/a&gt; &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;exa&lt;/code&gt; is a replacement for the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ls&lt;/code&gt; command. It has a ton of awesome features including:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;colors üéâ&lt;/li&gt;
  &lt;li&gt;ability to display git information&lt;/li&gt;
  &lt;li&gt;ability to display more file information&lt;/li&gt;
  &lt;li&gt;options to display a file tree&lt;/li&gt;
  &lt;li&gt;options to ignore particular directories or everything in your &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.gitignore&lt;/code&gt; file (we‚Äôre looking at you, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;node_modules&lt;/code&gt; üëÄ)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Downloading and installing is simple:&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;brew install exa&lt;/code&gt;&lt;/p&gt;

&lt;!--## Step 4: Configure `nvim` with `lualine`

*Note: it‚Äôs important that you‚Äôve installed nerd fonts in order for Lualine to work properly.*

You can install Neovim with Homebrew:

`brew install neovim`

Now in order to install lualine, we need to first configure `vim-plug`. Do that with the following prompt:

`sh -c &apos;curl -fLo &quot;${XDG_DATA_HOME:-$HOME/.local/share}&quot;/nvim/site/autoload/plug.vim --create-dirs \
       https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim&apos;
       
&lt;&lt;This is the area where I go the most rogue so to speak - I need to either confirm this on another system or put in disclaimers before posting. And that might mean I put a pin in this post‚Ä¶ would be a shame though‚Ä¶ &gt;&gt;

- Create .config/nvim/init.vim
- Add ~ THE mystery of line ~
- Add lualine text in there (vim - plug plus that lil script)

&lt;&lt;&gt;&gt;!!!

Next, create ??!

--&gt;

&lt;h2 id=&quot;step-4-select-themes&quot;&gt;Step 4: Select Themes&lt;/h2&gt;
&lt;p&gt;Shop around for themes you‚Äôd like to use for Hyper. (If you follow my recommendations, you can have your shell theme follow your terminal theme.) I also use Neovim and Lualine, so I only focus on themes available for all of those pieces of software. You can find themes with install instructions on the &lt;a href=&quot;https://hyper.is/themes&quot;&gt;Hyper website&lt;/a&gt;. You can try searching for packages on the &lt;a href=&quot;https://www.npmjs.com/&quot;&gt;npm website&lt;/a&gt; as well.&lt;/p&gt;

&lt;p&gt;Here are some themes I‚Äôve found that support all three:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.npmjs.com/package/hyper-solarized-dark&quot;&gt;Solarized Dark&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.npmjs.com/package/nord-hyper&quot;&gt;Nord&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.npmjs.com/package/hyper-dracula&quot;&gt;Dracula&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.npmjs.com/package/hyper-everforest&quot;&gt;Everforest&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;recap-and-conclusion&quot;&gt;Recap and Conclusion&lt;/h2&gt;
&lt;p&gt;I‚Äôve tried to make nearly every action step in this performable in the command line. You shouldn‚Äôt need to leave the terminal too much to proceed through this instructional and get your terminal up and running.&lt;/p&gt;

&lt;p&gt;The terminal doesn‚Äôt have to be intimidating or unappealing to use. There are a lot of utilities that make using it a lot less painful and I‚Äôm personally excited to keep using the terminal as much as I can and discover more awesome utilities as I go! Hopefully this little guide will get you started on a journey of terminal usage‚Äîor at least make your terminal a little bit more awesome.&lt;/p&gt;</content><author><name></name></author><category term="dev" /><summary type="html">I‚Äôve had mixed feelings about the terminal. On one hand, I‚Äôm a big fan of controlling a computer using primarily the keyboard. I use apps like Magnet, Things 3, and Alfred with keyboard shortcuts to perform as many actions as I can without taking my hands off the keyboard. On the other hand, the terminal seemed to be intimidating and have a steep learning curve.</summary></entry><entry><title type="html">I Believe in Programming Principles üß†</title><link href="/dev/programming-principles-language-skills" rel="alternate" type="text/html" title="I Believe in Programming Principles üß†" /><published>2021-06-13T00:00:00-05:00</published><updated>2021-06-13T00:00:00-05:00</updated><id>/dev/programming-principles-language-skills</id><content type="html" xml:base="/dev/programming-principles-language-skills">&lt;p&gt;I‚Äôll keep this one short. I believe that there is a distinct value in &lt;em&gt;thinking&lt;/em&gt; like a programmer that transcends the knowledge of a particular language.&lt;/p&gt;

&lt;p&gt;Actually‚ÄîI don‚Äôt just believe that there is. I &lt;em&gt;know&lt;/em&gt; that there is.&lt;/p&gt;

&lt;p&gt;Right now I‚Äôm diving deep into the React framework. Building apps which fired off numerous components based off of an array of data &lt;em&gt;changed the way I think&lt;/em&gt; about building pages in general. ‚ÄúHard coding is for fools! Automate that mess!‚Äù&lt;/p&gt;

&lt;p&gt;As a result I refactored an aspect of my portfolio page with the same principle in mind. I figured out a way‚Äîin Liquid, a totally different framework‚Äîto do essentially the same thing I was doing in React. Same programming principle. Different language.&lt;/p&gt;

&lt;p&gt;My lightbulb üí° moment was hardly the Copernican revolution. But the whole process did cement in my mind the idea that programming know-how is &lt;em&gt;independent&lt;/em&gt; (at least to a degree) of specific languages.&lt;/p&gt;</content><author><name></name></author><category term="dev" /><summary type="html">I‚Äôll keep this one short. I believe that there is a distinct value in thinking like a programmer that transcends the knowledge of a particular language.</summary></entry><entry><title type="html">Are Programmers Lazy? üßê</title><link href="/dev/are-programmers-lazy" rel="alternate" type="text/html" title="Are Programmers Lazy? üßê" /><published>2021-05-23T00:00:00-05:00</published><updated>2021-05-23T00:00:00-05:00</updated><id>/dev/are-programmers-lazy</id><content type="html" xml:base="/dev/are-programmers-lazy">&lt;p&gt;Programmers often say they‚Äôre lazy. They say this meaning that they would rather invent (or discover) a solution that cuts out grunt work than do the same tasks over and over.&lt;/p&gt;

&lt;p&gt;I think there‚Äôs a clearer way to frame it. Good programmers are lazy with respect to &lt;em&gt;grunt&lt;/em&gt; work, but marked by diligence when it comes to the &lt;em&gt;mental&lt;/em&gt; work of refactoring and eliminating redundancy.&lt;/p&gt;

&lt;p&gt;That said, there &lt;em&gt;is&lt;/em&gt; some wisdom in championing the traditional ‚Äúprogrammers are lazy‚Äù trope. It incentivizes &lt;em&gt;mental&lt;/em&gt; work by highlighting that mental work can save you from &lt;em&gt;grunt&lt;/em&gt; work.&lt;/p&gt;

&lt;p&gt;So, after all that, I guess I‚Äôm refactoring my site‚Äôs project section because I‚Äôm lazy.&lt;/p&gt;

&lt;p&gt;After updating this section with a few projects, I‚Äôve been struck with how fragile the process of hard-coding each new project in HTML. What if I forget to update one of the links? What if I ruin the section by mixing up the container hierarchy?&lt;/p&gt;

&lt;p&gt;I‚Äôve been trying to think of a solution to simply feed data to‚Ä¶¬†something‚Ä¶¬†and have it render each project. I would already know how to do this if my site were using React. I &lt;em&gt;could&lt;/em&gt; build this with vanilla JavaScript by iterating over an array of project data and appending each project card to the project section.&lt;/p&gt;

&lt;p&gt;Or I could be even lazier and look for a pre-built solution in Jekyll. There‚Äôs gotta be something, right?&lt;/p&gt;

&lt;div style=&quot;text-align: center; margin-bottom: 1.5rem;&quot;&gt;&lt;img src=&quot;https://media.giphy.com/media/3ohzAaRJ1e5SvhIWWY/giphy.gif&quot; /&gt;&lt;/div&gt;

&lt;p&gt;Yup! &lt;a href=&quot;https://jekyllrb.com/docs/datafiles/&quot;&gt;This&lt;/a&gt; article in the Jekyll documentation shows how to iterate over YAML, JSON, or CSV data files via Liquid. Now I can ‚Äúavoid copy-pasting large chunks of code in [my] Jekyll [template].‚Äù (You read my mind, Jekyll Docs.) After scanning some Liquid documentation I figured out how to sort it, too.&lt;/p&gt;

&lt;p&gt;Cheers to (not?) being lazy.ü•Ç&lt;/p&gt;</content><author><name></name></author><category term="dev" /><summary type="html">Programmers often say they‚Äôre lazy. They say this meaning that they would rather invent (or discover) a solution that cuts out grunt work than do the same tasks over and over.</summary></entry></feed>