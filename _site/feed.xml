<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.2.0">Jekyll</generator><link href="/feed.xml" rel="self" type="application/atom+xml" /><link href="/" rel="alternate" type="text/html" /><updated>2021-06-09T09:25:37-05:00</updated><id>/feed.xml</id><title type="html">Your awesome title</title><subtitle>Write an awesome description for your new site here. You can edit this line in _config.yml. It will appear in your document head meta (for Google search results) and in your feed.xml site description.</subtitle><entry><title type="html">Are Programmers Lazy?</title><link href="/2021/are-programmers-lazy.html" rel="alternate" type="text/html" title="Are Programmers Lazy?" /><published>2021-05-23T00:00:00-05:00</published><updated>2021-05-23T00:00:00-05:00</updated><id>/2021/are-programmers-lazy</id><content type="html" xml:base="/2021/are-programmers-lazy.html">&lt;p&gt;Programmers often say that they are lazy. When they say this, they mean that they would rather invent (or discover) a solution that cuts out grunt work than do the same tasks over and over.&lt;/p&gt;

&lt;p&gt;I think there‚Äôs a clearer way to frame it. Good programmers are lazy with respect to &lt;em&gt;grunt&lt;/em&gt; work, but marked by diligence when it comes to the &lt;em&gt;mental&lt;/em&gt; work of refactoring and eliminating redundancy.&lt;/p&gt;

&lt;p&gt;That said, there &lt;em&gt;is&lt;/em&gt; some wisdom in championing the traditional ‚Äúprogrammers are lazy‚Äù trope. It incentivizes &lt;em&gt;mental&lt;/em&gt; work by highlighting that mental work can save you from &lt;em&gt;grunt&lt;/em&gt; work.&lt;/p&gt;

&lt;p&gt;So, after all that, I guess I‚Äôm refactoring my site‚Äôs project section because I‚Äôm lazy.&lt;/p&gt;

&lt;p&gt;After updating this section with a few projects, I‚Äôve been struck with how fragile the process of hard-coding each new project in HTML. What if I forget to update one of the links? What if I ruin the section by mixing up the container hierarchy?&lt;/p&gt;

&lt;p&gt;I‚Äôve been trying to think of a solution to simply feed data to‚Ä¶¬†something‚Ä¶¬†and have it render each project. I would already know how to do this if my site were using React. I &lt;em&gt;could&lt;/em&gt; build this with vanilla JavaScript by iterating over an array of project data and appending each project card to the project section.&lt;/p&gt;

&lt;p&gt;Or I could be even lazier and look for a pre-built solution in Jekyll. There‚Äôs gotta be something, right?&lt;/p&gt;

&lt;div style=&quot;text-align: center; margin-bottom: 1.5rem;&quot;&gt;&lt;img src=&quot;https://media.giphy.com/media/3ohzAaRJ1e5SvhIWWY/giphy.gif&quot; /&gt;&lt;/div&gt;

&lt;p&gt;Yup! &lt;a href=&quot;https://jekyllrb.com/docs/datafiles/&quot;&gt;This&lt;/a&gt; article in the Jekyll documentation shows how to iterate over YAML, JSON, or CSV data files via Liquid. Now I can ‚Äúavoid copy-pasting large chunks of code in [my] Jekyll [template].‚Äù (You read my mind, Jekyll Docs.) After scanning some Liquid documentation I figured out how to sort it, too.&lt;/p&gt;

&lt;p&gt;Cheers to (not?) being lazy.ü•Ç&lt;/p&gt;</content><author><name></name></author><summary type="html">Programmers often say that they are lazy. When they say this, they mean that they would rather invent (or discover) a solution that cuts out grunt work than do the same tasks over and over.</summary></entry></feed>